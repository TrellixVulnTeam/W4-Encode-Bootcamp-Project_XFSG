{"ast":null,"code":"import _asyncToGenerator from \"/home/hammad/W3-Project/16-IPFS/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport { ethers } from 'ethers';\nimport TokenContract from 'src/assets/contracts/Token.json';\nimport * as i0 from \"@angular/core\";\nexport class BlockchainService {\n  constructor() {\n    this.provider = this.getProvider();\n    this.userWallet = ethers.Wallet.createRandom().connect(this.provider);\n    this.tokenContractInstance = new ethers.Contract(environment.tokenContractAddress, TokenContract.abi).connect(this.userWallet);\n  }\n\n  getProvider() {\n    return ethers.getDefaultProvider(environment.network);\n  }\n\n  address() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const address = _this.userWallet.address;\n      return address;\n    })();\n  }\n\n  etherBalance() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const etherBalanceBN = yield _this2.provider.getBalance(_this2.userWallet.address);\n      const etherBalance = ethers.utils.formatEther(etherBalanceBN) + ' ETH';\n      return etherBalance;\n    })();\n  }\n\n  networkName() {\n    return _asyncToGenerator(function* () {\n      const networkName = environment.network;\n      return networkName;\n    })();\n  }\n\n  number() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const number = yield _this3.provider.getBlockNumber();\n      return number.toFixed(0);\n    })();\n  }\n\n  tokenAddress() {\n    return _asyncToGenerator(function* () {\n      const tokenAddress = environment.tokenContractAddress;\n      return tokenAddress;\n    })();\n  }\n\n  tokenName() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const tokenName = yield _this4.tokenContractInstance['name']();\n      return tokenName;\n    })();\n  }\n\n  symbol() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const symbol = yield _this5.tokenContractInstance['symbol']();\n      return symbol;\n    })();\n  }\n\n  supply() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const supplyBN = yield _this6.tokenContractInstance['totalSupply']();\n      const supply = ethers.utils.formatEther(supplyBN);\n      return supply + ' Tokens';\n    })();\n  }\n\n  tokenBalance() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const tokenBalanceBN = yield _this7.tokenContractInstance['balanceOf'](_this7.userWallet.address);\n      const tokenBalance = ethers.utils.formatEther(tokenBalanceBN);\n      return tokenBalance + ' Tokens';\n    })();\n  }\n\n  watchBlockNumber(callbackFn) {\n    const filter = 'block';\n    this.provider.on(filter, event => callbackFn(event));\n  }\n\n  watchUserBalanceEther(callbackFn) {\n    const filter = [ethers.utils.hexZeroPad(this.userWallet.address, 32)];\n    this.provider.on(filter, event => callbackFn(event));\n  }\n\n  watchContractSupply(callbackFn) {\n    const filter = this.tokenContractInstance.filters['Transfer']();\n    this.provider.on(filter, event => callbackFn(event));\n  }\n\n  watchUserBalanceToken(callbackFn) {\n    const filterFrom = this.tokenContractInstance.filters['Transfer'](this.userWallet.address);\n    const filterTo = this.tokenContractInstance.filters['Transfer'](null, this.userWallet.address);\n    this.tokenContractInstance.on(filterFrom, event => callbackFn(event));\n    this.tokenContractInstance.on(filterTo, event => callbackFn(event));\n  }\n\n  signTokenRequest(amount) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const signatureObject = {\n        address: _this8.userWallet.address,\n        amount: amount\n      };\n      const signatureMessage = JSON.stringify(signatureObject);\n      return yield _this8.userWallet.signMessage(signatureMessage);\n    })();\n  }\n\n}\n\nBlockchainService.ɵfac = function BlockchainService_Factory(t) {\n  return new (t || BlockchainService)();\n};\n\nBlockchainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BlockchainService,\n  factory: BlockchainService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","ethers","TokenContract","i0","BlockchainService","constructor","provider","getProvider","userWallet","Wallet","createRandom","connect","tokenContractInstance","Contract","tokenContractAddress","abi","getDefaultProvider","network","address","etherBalance","etherBalanceBN","getBalance","utils","formatEther","networkName","number","getBlockNumber","toFixed","tokenAddress","tokenName","symbol","supply","supplyBN","tokenBalance","tokenBalanceBN","watchBlockNumber","callbackFn","filter","on","event","watchUserBalanceEther","hexZeroPad","watchContractSupply","filters","watchUserBalanceToken","filterFrom","filterTo","signTokenRequest","amount","signatureObject","signatureMessage","JSON","stringify","signMessage","ɵfac","BlockchainService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"sources":["/home/hammad/W3-Project/16-IPFS/Frontend/src/app/services/blockchain.service.ts"],"sourcesContent":["import { environment } from 'src/environments/environment';\nimport { ethers } from 'ethers';\nimport TokenContract from 'src/assets/contracts/Token.json';\nimport * as i0 from \"@angular/core\";\nexport class BlockchainService {\n    constructor() {\n        this.provider = this.getProvider();\n        this.userWallet = ethers.Wallet.createRandom().connect(this.provider);\n        this.tokenContractInstance = new ethers.Contract(environment.tokenContractAddress, TokenContract.abi).connect(this.userWallet);\n    }\n    getProvider() {\n        return ethers.getDefaultProvider(environment.network);\n    }\n    async address() {\n        const address = this.userWallet.address;\n        return address;\n    }\n    async etherBalance() {\n        const etherBalanceBN = await this.provider.getBalance(this.userWallet.address);\n        const etherBalance = ethers.utils.formatEther(etherBalanceBN) + ' ETH';\n        return etherBalance;\n    }\n    async networkName() {\n        const networkName = environment.network;\n        return networkName;\n    }\n    async number() {\n        const number = await this.provider.getBlockNumber();\n        return number.toFixed(0);\n    }\n    async tokenAddress() {\n        const tokenAddress = environment.tokenContractAddress;\n        return tokenAddress;\n    }\n    async tokenName() {\n        const tokenName = await this.tokenContractInstance['name']();\n        return tokenName;\n    }\n    async symbol() {\n        const symbol = await this.tokenContractInstance['symbol']();\n        return symbol;\n    }\n    async supply() {\n        const supplyBN = await this.tokenContractInstance['totalSupply']();\n        const supply = ethers.utils.formatEther(supplyBN);\n        return supply + ' Tokens';\n    }\n    async tokenBalance() {\n        const tokenBalanceBN = await this.tokenContractInstance['balanceOf'](this.userWallet.address);\n        const tokenBalance = ethers.utils.formatEther(tokenBalanceBN);\n        return tokenBalance + ' Tokens';\n    }\n    watchBlockNumber(callbackFn) {\n        const filter = 'block';\n        this.provider.on(filter, (event) => callbackFn(event));\n    }\n    watchUserBalanceEther(callbackFn) {\n        const filter = [ethers.utils.hexZeroPad(this.userWallet.address, 32)];\n        this.provider.on(filter, (event) => callbackFn(event));\n    }\n    watchContractSupply(callbackFn) {\n        const filter = this.tokenContractInstance.filters['Transfer']();\n        this.provider.on(filter, (event) => callbackFn(event));\n    }\n    watchUserBalanceToken(callbackFn) {\n        const filterFrom = this.tokenContractInstance.filters['Transfer'](this.userWallet.address);\n        const filterTo = this.tokenContractInstance.filters['Transfer'](null, this.userWallet.address);\n        this.tokenContractInstance.on(filterFrom, (event) => callbackFn(event));\n        this.tokenContractInstance.on(filterTo, (event) => callbackFn(event));\n    }\n    async signTokenRequest(amount) {\n        const signatureObject = {\n            address: this.userWallet.address,\n            amount: amount,\n        };\n        const signatureMessage = JSON.stringify(signatureObject);\n        return await this.userWallet.signMessage(signatureMessage);\n    }\n}\nBlockchainService.ɵfac = function BlockchainService_Factory(t) { return new (t || BlockchainService)(); };\nBlockchainService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BlockchainService, factory: BlockchainService.ɵfac, providedIn: 'root' });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}